[global]
virtualmin = yes
systemd = yes
logging_level = INFO
controllers = cpuset,cpu,io,memory,hugetlb,pids,rdma,misc
name = webusers

[global_cgroup]
# https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/admin-guide/cgroup-v2.rst


## memory controller ( v2 )

# memory.min
#	A read-write single value file which exists on non-root
#	cgroups.  The default is "0".
#	Hard memory protection.  If the memory usage of a cgroup
#	is within its effective min boundary, the cgroup's memory
#	won't be reclaimed under any conditions. If there is no
#	unprotected reclaimable memory available, OOM killer
#	is invoked.
#       Effective min boundary is limited by memory.min values of
#	all ancestor cgroups. If there is memory.min overcommitment
#	(child cgroup or cgroups are requiring more protected memory
#	than parent will allow), then each child cgroup will get
#	the part of parent's protection proportional to its
#	actual memory usage below memory.min.
#	Putting more memory than generally available under this
#	protection is discouraged and may lead to constant OOMs.
#	If a memory cgroup is not populated with processes,
#	its memory.min is ignored.
;memory.min = 0

# memory.low
#	A read-write single value file which exists on non-root
#	cgroups.  The default is "0".
#	Best-effort memory protection.  If the memory usage of a
#	cgroup is within its effective low boundary, the cgroup's
#	memory won't be reclaimed unless memory can be reclaimed
#	from unprotected cgroups.
#	Effective low boundary is limited by memory.low values of
#	all ancestor cgroups. If there is memory.low overcommitment
#	(child cgroup or cgroups are requiring more protected memory
#	than parent will allow), then each child cgroup will get
#	the part of parent's protection proportional to its
#	actual memory usage below memory.low.
#	Putting more memory than generally available under this
#	protection is discouraged.
;memory.low = 0

# memory.high
#	A read-write single value file which exists on non-root
#	cgroups.  The default is "max".
#
#	Memory usage throttle limit.  This is the main mechanism to
#	control memory usage of a cgroup.  If a cgroup's usage goes
#	over the high boundary, the processes of the cgroup are
#	throttled and put under heavy reclaim pressure.
#	Going over the high limit never invokes the OOM killer and
#	under extreme conditions the limit may be breached.
;memory.high = max

# memory.max
#	A read-write single value file which exists on non-root
#	cgroups.  The default is "max".
#	Memory usage hard limit.  This is the final protection
#	mechanism.  If a cgroup's memory usage reaches this limit and
#	can't be reduced, the OOM killer is invoked in the cgroup.
#	Under certain circumstances, the usage may go over the limit
#	temporarily.
#	This is the ultimate protection mechanism.  As long as the
#	high limit is used and monitored properly, this limit's
#	utility is limited to providing the final safety net.
;memory.max = max

# memory.oom.group
#	A read-write single value file which exists on non-root
#	cgroups.  The default value is "0".
#	Determines whether the cgroup should be treated as
#	an indivisible workload by the OOM killer. If set,
#	all tasks belonging to the cgroup or to its descendants
#	(if the memory cgroup is not a leaf cgroup) are killed
#	together or not at all. This can be used to avoid
#	partial kills to guarantee workload integrity.
#	Tasks with the OOM protection (oom_score_adj set to -1000)
#	are treated as an exception and are never killed.
#	If the OOM killer is invoked in a cgroup, it's not going
#	to kill any tasks outside of this cgroup, regardless
#	memory.oom.group values of ancestor cgroups.
;memory.oom.group = 0

# memory.swap.max
#	A read-write single value file which exists on non-root
#	cgroups.  The default is "max".
;memory.swap.max = max


## memory controller ( v1 )
# https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/admin-guide/cgroup-v1/memory.rst

# memory.limit_in_bytes
#	set/show limit of memory usage
; memory.limit_in_bytes =

# memory.memsw.limit_in_bytes
#	set/show limit of memory+Swap usage
; memory.memsw.limit_in_bytes =

# memory.soft_limit_in_bytes
#	set/show soft limit of memory usage
; memory.soft_limit_in_bytes =

# memory.use_hierarchy
#	set/show hierarchical account enabled
#	This knob is deprecated and shouldn't be
#	used.
; memory.use_hierarchy =

# memory.pressure_level
#	set memory pressure notifications
; memory.pressure_level =

# memory.swappiness
#	set/show swappiness parameter of vmscan
#	(See sysctl's vm.swappiness)
; memory.swappiness =

# memory.move_charge_at_immigrate
#	set/show controls of moving charges
; memory.move_charge_at_immigrate =

# memory.kmem.tcp.limit_in_bytes
#	set/show hard limit for tcp buf memory
; memory.kmem.tcp.limit_in_bytes =


## cpu controller

# cpu.weight
# 	A read-write single value file which exists on non-root
#	cgroups.  The default is "100".
#	The weight in the range [1, 10000].
;cpu.weight = 100

# cpu.weight.nice
# 	A read-write single value file which exists on non-root
#	cgroups.  The default is "0".
#	The nice value is in the range [-20, 19].
#	This interface file is an alternative interface for
#	"cpu.weight" and allows reading and setting weight using the
#	same values used by nice(2).  Because the range is smaller and
#	granularity is coarser for the nice values, the read value is
#	the closest approximation of the current weight.
;cpu.weight.nice = 0

# cpu.max
#	A read-write single value file which exists on non-root
#	cgroups.  The default is "0".
#	The nice value is in the range [-20, 19].
#	This interface file is an alternative interface for
#	"cpu.weight" and allows reading and setting weight using the
#	same values used by nice(2).  Because the range is smaller and
#	granularity is coarser for the nice values, the read value is
#	the closest approximation of the current weight.
;cpu.max = max 100000


## io controller ( v2 )

# io.weight
#	A read-write flat-keyed file which exists on non-root cgroups.
#	The default is "default 100".
#	The first line is the default weight applied to devices
#	without specific override.  The rest are overrides keyed by
#	$MAJ:$MIN device numbers and not ordered.  The weights are in
#	the range [1, 10000] and specifies the relative amount IO time
#	the cgroup can use in relation to its siblings.
#	The default weight can be updated by writing either "default
#	$WEIGHT" or simply "$WEIGHT".  Overrides can be set by writing
#	"$MAJ:$MIN $WEIGHT" and unset by writing "$MAJ:$MIN default".
#	An example read output follows::
#	  default 100
#	  8:16 200
#	  8:0 50
; io.weight = 100

# io.max
#	A read-write nested-keyed file which exists on non-root
#	cgroups.
#	BPS and IOPS based IO limit.  Lines are keyed by $MAJ:$MIN
#	device numbers and not ordered.  The following nested keys are
#	defined.
#	  =====		==================================
#	  rbps		Max read bytes per second
#	  wbps		Max write bytes per second
#	  riops		Max read IO operations per second
#	  wiops		Max write IO operations per second
#	  =====		==================================
#	When writing, any number of nested key-value pairs can be
#	specified in any order.  "max" can be specified as the value
#	to remove a specific limit.  If the same key is specified
#	multiple times, the outcome is undefined.
#	BPS and IOPS are measured in each IO direction and IOs are
#	delayed if limit is reached.  Temporary bursts are allowed.
#	Setting read limit at 2M BPS and write at 120 IOPS for 8:16::
#	  echo "8:16 rbps=2097152 wiops=120" > io.max
#	Reading returns the following::
#	  8:16 rbps=2097152 wbps=max riops=max wiops=120
#	Write IOPS limit can be removed by writing the following::
#	  echo "8:16 wiops=max" > io.max
#	Reading now returns the following::
#	  8:16 rbps=2097152 wbps=max riops=max wiops=max
; io.max =


##  pids controller

# pids.max
#	A read-write single value file which exists on non-root
#	cgroups.  The default is "max".
#
#	Hard limit of number of processes.
; pids.max = max


## cpuset controller ( v2 )

# cpuset.cpus
#	A read-write multiple values file which exists on non-root
#	cpuset-enabled cgroups.
#	It lists the requested CPUs to be used by tasks within this
#	cgroup.  The actual list of CPUs to be granted, however, is
#	subjected to constraints imposed by its parent and can differ
#	from the requested CPUs.
#	The CPU numbers are comma-separated numbers or ranges.
#	For example:
#	  # cat cpuset.cpus
#	  0-4,6,8-10
#	An empty value indicates that the cgroup is using the same
#	setting as the nearest cgroup ancestor with a non-empty
#	"cpuset.cpus" or all the available CPUs if none is found.
#	The value of "cpuset.cpus" stays constant until the next update
#	and won't be affected by any CPU hotplug events.
; cpuset.cpus =

# cpuset.mems
#	A read-write multiple values file which exists on non-root
#	cpuset-enabled cgroups.
#	It lists the requested memory nodes to be used by tasks within
#	this cgroup.  The actual list of memory nodes granted, however,
#	is subjected to constraints imposed by its parent and can differ
#	from the requested memory nodes.
#	The memory node numbers are comma-separated numbers or ranges.
#	For example:
#	  # cat cpuset.mems
#	  0-1,3
#	An empty value indicates that the cgroup is using the same
#	setting as the nearest cgroup ancestor with a non-empty
#	"cpuset.mems" or all the available memory nodes if none
#	is found.
#	The value of "cpuset.mems" stays constant until the next update
#	and won't be affected by any memory nodes hotplug events.
; cpuset.mems =

# cpuset.cpus.partition
#	A read-write single value file which exists on non-root
#	cpuset-enabled cgroups.  This flag is owned by the parent cgroup
#	and is not delegatable.
#        It accepts only the following input values when written to.
#        "root"   - a paritition root
#        "member" - a non-root member of a partition
#	When set to be a partition root, the current cgroup is the
#	root of a new partition or scheduling domain that comprises
#	itself and all its descendants except those that are separate
#	partition roots themselves and their descendants.  The root
#	cgroup is always a partition root.
#	There are constraints on where a partition root can be set.
#	It can only be set in a cgroup if all the following conditions
#	are true.
#	1) The "cpuset.cpus" is not empty and the list of CPUs are
#	   exclusive, i.e. they are not shared by any of its siblings.
#	2) The parent cgroup is a partition root.
#	3) The "cpuset.cpus" is also a proper subset of the parent's
#	   "cpuset.cpus.effective".
#	4) There is no child cgroups with cpuset enabled.  This is for
#	   eliminating corner cases that have to be handled if such a
#	   condition is allowed.
#	Setting it to partition root will take the CPUs away from the
#	effective CPUs of the parent cgroup.  Once it is set, this
#	file cannot be reverted back to "member" if there are any child
#	cgroups with cpuset enabled.
#	A parent partition cannot distribute all its CPUs to its
#	child partitions.  There must be at least one cpu left in the
#	parent partition.
#	Once becoming a partition root, changes to "cpuset.cpus" is
#	generally allowed as long as the first condition above is true,
#	the change will not take away all the CPUs from the parent
#	partition and the new "cpuset.cpus" value is a superset of its
#	children's "cpuset.cpus" values.
#	Sometimes, external factors like changes to ancestors'
#	"cpuset.cpus" or cpu hotplug can cause the state of the partition
#	root to change.  On read, the "cpuset.sched.partition" file
#	can show the following values.
#	"member"       Non-root member of a partition
#	"root"         Partition root
#	"root invalid" Invalid partition root
#	It is a partition root if the first 2 partition root conditions
#	above are true and at least one CPU from "cpuset.cpus" is
#	granted by the parent cgroup.
#	A partition root can become invalid if none of CPUs requested
#	in "cpuset.cpus" can be granted by the parent cgroup or the
#	parent cgroup is no longer a partition root itself.  In this
#	case, it is not a real partition even though the restriction
#	of the first partition root condition above will still apply.
#	The cpu affinity of all the tasks in the cgroup will then be
#	associated with CPUs in the nearest ancestor partition.
#	An invalid partition root can be transitioned back to a
#	real partition root if at least one of the requested CPUs
#	can now be granted by its parent.  In this case, the cpu
#	affinity of all the tasks in the formerly invalid partition
#	will be associated to the CPUs of the newly formed partition.
#	Changing the partition state of an invalid partition root to
#	"member" is always allowed even if child cpusets are present.
; cpuset.cpus.partition =


## cpuset controller ( v1 )
# https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/admin-guide/cgroup-v1/cpusets.rst

# cpuset.memory_migrate
#	flag: if set, move pages to cpusets nodes
; cpuset.memory_migrate =

# cpuset.memory_spread_page
#	flag: if set, spread page cache evenly on allowed nodes
; cpuset.memory_spread_page =

# cpuset.memory_spread_slab
#	flag: if set, spread slab cache evenly on allowed nodes
; cpuset.memory_spread_slab =

# cpuset.sched_load_balance
#	flag: if set, load balance within CPUs on that cpuset
; cpuset.sched_load_balance =


## rdma controller ( v2 )

# rdma.max
#	A readwrite nested-keyed file that exists for all the cgroups
#	except root that describes current configured resource limit
#	for a RDMA/IB device.
#	Lines are keyed by device name and are not ordered.
#	Each line contains space separated resource name and its configured
#	limit that can be distributed.
#	The following nested keys are defined.
#	  ==========	=============================
#	  hca_handle	Maximum number of HCA Handles
#	  hca_object 	Maximum number of HCA Objects
#	  ==========	=============================
#	An example for mlx4 and ocrdma device follows::
#	  mlx4_0 hca_handle=2 hca_object=2000
#	  ocrdma1 hca_handle=3 hca_object=max
; rdma.max =


[users_cgroup]

## memory controller ( v2 )

# memory.min
#	A read-write single value file which exists on non-root
#	cgroups.  The default is "0".
#	Hard memory protection.  If the memory usage of a cgroup
#	is within its effective min boundary, the cgroup's memory
#	won't be reclaimed under any conditions. If there is no
#	unprotected reclaimable memory available, OOM killer
#	is invoked.
#       Effective min boundary is limited by memory.min values of
#	all ancestor cgroups. If there is memory.min overcommitment
#	(child cgroup or cgroups are requiring more protected memory
#	than parent will allow), then each child cgroup will get
#	the part of parent's protection proportional to its
#	actual memory usage below memory.min.
#	Putting more memory than generally available under this
#	protection is discouraged and may lead to constant OOMs.
#	If a memory cgroup is not populated with processes,
#	its memory.min is ignored.
;memory.min = 0

# memory.low
#	A read-write single value file which exists on non-root
#	cgroups.  The default is "0".
#	Best-effort memory protection.  If the memory usage of a
#	cgroup is within its effective low boundary, the cgroup's
#	memory won't be reclaimed unless memory can be reclaimed
#	from unprotected cgroups.
#	Effective low boundary is limited by memory.low values of
#	all ancestor cgroups. If there is memory.low overcommitment
#	(child cgroup or cgroups are requiring more protected memory
#	than parent will allow), then each child cgroup will get
#	the part of parent's protection proportional to its
#	actual memory usage below memory.low.
#	Putting more memory than generally available under this
#	protection is discouraged.
;memory.low = 0

# memory.high
#	A read-write single value file which exists on non-root
#	cgroups.  The default is "max".
#
#	Memory usage throttle limit.  This is the main mechanism to
#	control memory usage of a cgroup.  If a cgroup's usage goes
#	over the high boundary, the processes of the cgroup are
#	throttled and put under heavy reclaim pressure.
#	Going over the high limit never invokes the OOM killer and
#	under extreme conditions the limit may be breached.
;memory.high = max

# memory.max
#	A read-write single value file which exists on non-root
#	cgroups.  The default is "max".
#	Memory usage hard limit.  This is the final protection
#	mechanism.  If a cgroup's memory usage reaches this limit and
#	can't be reduced, the OOM killer is invoked in the cgroup.
#	Under certain circumstances, the usage may go over the limit
#	temporarily.
#	This is the ultimate protection mechanism.  As long as the
#	high limit is used and monitored properly, this limit's
#	utility is limited to providing the final safety net.
;memory.max = max

# memory.oom.group
#	A read-write single value file which exists on non-root
#	cgroups.  The default value is "0".
#	Determines whether the cgroup should be treated as
#	an indivisible workload by the OOM killer. If set,
#	all tasks belonging to the cgroup or to its descendants
#	(if the memory cgroup is not a leaf cgroup) are killed
#	together or not at all. This can be used to avoid
#	partial kills to guarantee workload integrity.
#	Tasks with the OOM protection (oom_score_adj set to -1000)
#	are treated as an exception and are never killed.
#	If the OOM killer is invoked in a cgroup, it's not going
#	to kill any tasks outside of this cgroup, regardless
#	memory.oom.group values of ancestor cgroups.
;memory.oom.group = 0

# memory.swap.max
#	A read-write single value file which exists on non-root
#	cgroups.  The default is "max".
;memory.swap.max = max


## memory controller ( v1 )
# https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/admin-guide/cgroup-v1/memory.rst

# memory.limit_in_bytes
#	set/show limit of memory usage
; memory.limit_in_bytes =

# memory.memsw.limit_in_bytes
#	set/show limit of memory+Swap usage
; memory.memsw.limit_in_bytes =

# memory.soft_limit_in_bytes
#	set/show soft limit of memory usage
; memory.soft_limit_in_bytes =

# memory.use_hierarchy
#	set/show hierarchical account enabled
#	This knob is deprecated and shouldn't be
#	used.
; memory.use_hierarchy =

# memory.pressure_level
#	set memory pressure notifications
; memory.pressure_level =

# memory.swappiness
#	set/show swappiness parameter of vmscan
#	(See sysctl's vm.swappiness)
; memory.swappiness =

# memory.move_charge_at_immigrate
#	set/show controls of moving charges
; memory.move_charge_at_immigrate =

# memory.kmem.tcp.limit_in_bytes
#	set/show hard limit for tcp buf memory
; memory.kmem.tcp.limit_in_bytes =


## cpu controller

# cpu.weight
# 	A read-write single value file which exists on non-root
#	cgroups.  The default is "100".
#	The weight in the range [1, 10000].
;cpu.weight = 100

# cpu.weight.nice
# 	A read-write single value file which exists on non-root
#	cgroups.  The default is "0".
#	The nice value is in the range [-20, 19].
#	This interface file is an alternative interface for
#	"cpu.weight" and allows reading and setting weight using the
#	same values used by nice(2).  Because the range is smaller and
#	granularity is coarser for the nice values, the read value is
#	the closest approximation of the current weight.
;cpu.weight.nice = 0

# cpu.max
#	A read-write single value file which exists on non-root
#	cgroups.  The default is "0".
#	The nice value is in the range [-20, 19].
#	This interface file is an alternative interface for
#	"cpu.weight" and allows reading and setting weight using the
#	same values used by nice(2).  Because the range is smaller and
#	granularity is coarser for the nice values, the read value is
#	the closest approximation of the current weight.
;cpu.max = max 100000


## io controller ( v2 )

# io.weight
#	A read-write flat-keyed file which exists on non-root cgroups.
#	The default is "default 100".
#	The first line is the default weight applied to devices
#	without specific override.  The rest are overrides keyed by
#	$MAJ:$MIN device numbers and not ordered.  The weights are in
#	the range [1, 10000] and specifies the relative amount IO time
#	the cgroup can use in relation to its siblings.
#	The default weight can be updated by writing either "default
#	$WEIGHT" or simply "$WEIGHT".  Overrides can be set by writing
#	"$MAJ:$MIN $WEIGHT" and unset by writing "$MAJ:$MIN default".
#	An example read output follows::
#	  default 100
#	  8:16 200
#	  8:0 50
; io.weight = 100

# io.max
#	A read-write nested-keyed file which exists on non-root
#	cgroups.
#	BPS and IOPS based IO limit.  Lines are keyed by $MAJ:$MIN
#	device numbers and not ordered.  The following nested keys are
#	defined.
#	  =====		==================================
#	  rbps		Max read bytes per second
#	  wbps		Max write bytes per second
#	  riops		Max read IO operations per second
#	  wiops		Max write IO operations per second
#	  =====		==================================
#	When writing, any number of nested key-value pairs can be
#	specified in any order.  "max" can be specified as the value
#	to remove a specific limit.  If the same key is specified
#	multiple times, the outcome is undefined.
#	BPS and IOPS are measured in each IO direction and IOs are
#	delayed if limit is reached.  Temporary bursts are allowed.
#	Setting read limit at 2M BPS and write at 120 IOPS for 8:16::
#	  echo "8:16 rbps=2097152 wiops=120" > io.max
#	Reading returns the following::
#	  8:16 rbps=2097152 wbps=max riops=max wiops=120
#	Write IOPS limit can be removed by writing the following::
#	  echo "8:16 wiops=max" > io.max
#	Reading now returns the following::
#	  8:16 rbps=2097152 wbps=max riops=max wiops=max
; io.max =


##  pids controller

# pids.max
#	A read-write single value file which exists on non-root
#	cgroups.  The default is "max".
#
#	Hard limit of number of processes.
; pids.max = max


## cpuset controller ( v2 )

# cpuset.cpus
#	A read-write multiple values file which exists on non-root
#	cpuset-enabled cgroups.
#	It lists the requested CPUs to be used by tasks within this
#	cgroup.  The actual list of CPUs to be granted, however, is
#	subjected to constraints imposed by its parent and can differ
#	from the requested CPUs.
#	The CPU numbers are comma-separated numbers or ranges.
#	For example:
#	  # cat cpuset.cpus
#	  0-4,6,8-10
#	An empty value indicates that the cgroup is using the same
#	setting as the nearest cgroup ancestor with a non-empty
#	"cpuset.cpus" or all the available CPUs if none is found.
#	The value of "cpuset.cpus" stays constant until the next update
#	and won't be affected by any CPU hotplug events.
; cpuset.cpus =

# cpuset.mems
#	A read-write multiple values file which exists on non-root
#	cpuset-enabled cgroups.
#	It lists the requested memory nodes to be used by tasks within
#	this cgroup.  The actual list of memory nodes granted, however,
#	is subjected to constraints imposed by its parent and can differ
#	from the requested memory nodes.
#	The memory node numbers are comma-separated numbers or ranges.
#	For example:
#	  # cat cpuset.mems
#	  0-1,3
#	An empty value indicates that the cgroup is using the same
#	setting as the nearest cgroup ancestor with a non-empty
#	"cpuset.mems" or all the available memory nodes if none
#	is found.
#	The value of "cpuset.mems" stays constant until the next update
#	and won't be affected by any memory nodes hotplug events.
; cpuset.mems =

# cpuset.cpus.partition
#	A read-write single value file which exists on non-root
#	cpuset-enabled cgroups.  This flag is owned by the parent cgroup
#	and is not delegatable.
#        It accepts only the following input values when written to.
#        "root"   - a paritition root
#        "member" - a non-root member of a partition
#	When set to be a partition root, the current cgroup is the
#	root of a new partition or scheduling domain that comprises
#	itself and all its descendants except those that are separate
#	partition roots themselves and their descendants.  The root
#	cgroup is always a partition root.
#	There are constraints on where a partition root can be set.
#	It can only be set in a cgroup if all the following conditions
#	are true.
#	1) The "cpuset.cpus" is not empty and the list of CPUs are
#	   exclusive, i.e. they are not shared by any of its siblings.
#	2) The parent cgroup is a partition root.
#	3) The "cpuset.cpus" is also a proper subset of the parent's
#	   "cpuset.cpus.effective".
#	4) There is no child cgroups with cpuset enabled.  This is for
#	   eliminating corner cases that have to be handled if such a
#	   condition is allowed.
#	Setting it to partition root will take the CPUs away from the
#	effective CPUs of the parent cgroup.  Once it is set, this
#	file cannot be reverted back to "member" if there are any child
#	cgroups with cpuset enabled.
#	A parent partition cannot distribute all its CPUs to its
#	child partitions.  There must be at least one cpu left in the
#	parent partition.
#	Once becoming a partition root, changes to "cpuset.cpus" is
#	generally allowed as long as the first condition above is true,
#	the change will not take away all the CPUs from the parent
#	partition and the new "cpuset.cpus" value is a superset of its
#	children's "cpuset.cpus" values.
#	Sometimes, external factors like changes to ancestors'
#	"cpuset.cpus" or cpu hotplug can cause the state of the partition
#	root to change.  On read, the "cpuset.sched.partition" file
#	can show the following values.
#	"member"       Non-root member of a partition
#	"root"         Partition root
#	"root invalid" Invalid partition root
#	It is a partition root if the first 2 partition root conditions
#	above are true and at least one CPU from "cpuset.cpus" is
#	granted by the parent cgroup.
#	A partition root can become invalid if none of CPUs requested
#	in "cpuset.cpus" can be granted by the parent cgroup or the
#	parent cgroup is no longer a partition root itself.  In this
#	case, it is not a real partition even though the restriction
#	of the first partition root condition above will still apply.
#	The cpu affinity of all the tasks in the cgroup will then be
#	associated with CPUs in the nearest ancestor partition.
#	An invalid partition root can be transitioned back to a
#	real partition root if at least one of the requested CPUs
#	can now be granted by its parent.  In this case, the cpu
#	affinity of all the tasks in the formerly invalid partition
#	will be associated to the CPUs of the newly formed partition.
#	Changing the partition state of an invalid partition root to
#	"member" is always allowed even if child cpusets are present.
; cpuset.cpus.partition =


## cpuset controller ( v1 )
# https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/admin-guide/cgroup-v1/cpusets.rst

# cpuset.memory_migrate
#	flag: if set, move pages to cpusets nodes
; cpuset.memory_migrate =

# cpuset.memory_spread_page
#	flag: if set, spread page cache evenly on allowed nodes
; cpuset.memory_spread_page =

# cpuset.memory_spread_slab
#	flag: if set, spread slab cache evenly on allowed nodes
; cpuset.memory_spread_slab =

# cpuset.sched_load_balance
#	flag: if set, load balance within CPUs on that cpuset
; cpuset.sched_load_balance =


## rdma controller ( v2 )

# rdma.max
#	A readwrite nested-keyed file that exists for all the cgroups
#	except root that describes current configured resource limit
#	for a RDMA/IB device.
#	Lines are keyed by device name and are not ordered.
#	Each line contains space separated resource name and its configured
#	limit that can be distributed.
#	The following nested keys are defined.
#	  ==========	=============================
#	  hca_handle	Maximum number of HCA Handles
#	  hca_object 	Maximum number of HCA Objects
#	  ==========	=============================
#	An example for mlx4 and ocrdma device follows::
#	  mlx4_0 hca_handle=2 hca_object=2000
#	  ocrdma1 hca_handle=3 hca_object=max
; rdma.max =
